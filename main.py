import os

from aiogram.types import ContentType
from image_convert import make_pdf_file
import config
import logging
from aiogram import Bot, Dispatcher, executor, types

logging.basicConfig(level=logging.INFO)

# initialise bot
bot = Bot(token=config.TOKEN)
db = Dispatcher(bot)

make_pdf = False
photo_for_file = []


def del_dir(path):
    for i in os.listdir(path):
        os.remove(path + '\\' + i)
    os.rmdir(path)


@db.message_handler(commands=["start"])
async def start(message: types.message):
    """The start method"""

    me = await bot.get_me()
    await message.answer('–Ø {} –±–æ—Ç —Å–æ–∑–¥–∞–Ω—ã–π —Å –ø—Ä–∏—Ö–æ—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ –¥–∑ üòú\n –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è '
                         '–ø–æ–ª—É—á–µ–Ω–∏–∏—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'.format(me.first_name))


@db.message_handler(commands=["help"])
async def help(message: types.message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç {}, –Ω–µ–±–æ–ª—å—à–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–±–µ –Ω—É–∂–Ω–æ–≥–æ pdf —Ñ–∞–π–ª–∞ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫:\n1) –í–≤–µ–¥–∏ '
                         '–∫–æ–º–∞–Ω–¥—É /home_task\n2) –û—Ç–ø—Ä–∞–≤—å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ç–æ\n3) –í–≤–µ–¥–∏ /end –∏ –ø–æ–¥–æ–∂–¥–∏ —Å–æ–∑–¥–∞–Ω–∏—è '
                         '—Ñ–∞–π–ª–∞ –∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–±–µ.'.format(message.chat.first_name))


@db.message_handler(commands=["home_task"])
async def home_task(message):
    global make_pdf
    if not make_pdf:
        await message.answer('–ú–æ–∏ —Å–æ–±–æ–ª–µ–∑–Ω–æ–≤–∞–Ω–∏—èüò¢üò¢üò¢\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –≤ –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫–æ–º —Ö–æ—á–µ—à—å –≤–∏–¥–∏—Ç—å –∏—Ö –≤ —Ñ–∞–π–ª–µ pdf')
        make_pdf = True


@db.message_handler(commands=["end"])
async def end(message):
    global make_pdf, photo_for_file
    if make_pdf:
        path = 'Images\{}'.format(message.from_user.id)
        if os.path.exists(path):
            del_dir(path)
        os.mkdir(path)
        await message.answer('–ú–æ–ª–æ–¥–µ—Ü, –∫–∞–∫ —è –∏ –æ–∂–∏–¥–∞–ª —Ç—ã —Å–º–æ–≥ –µ–≥–æ —Å–¥–µ–ª–∞—Ç—å‚ù§‚ù§‚ù§')
        make_pdf = False
        j = 0
        for i in photo_for_file:
            await i.download('{Images}\{file_name}.jpg'.format(Images=path, file_name=j))
            j += 1
        make_pdf_file('heh', path)
        doc = open('{}\heh.pdf'.format(path), 'rb')
        await bot.send_document(message.from_user.id, doc, caption='–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!')
        doc.close()
        del_dir(path)
        photo_for_file = []


@db.message_handler(content_types=ContentType.PHOTO)
async def picture(message: types.chat_photo):
    if make_pdf:
        # await bot.send_photo(message.chat.id, message.photo[0].file_id)
        photo_for_file.append(message.photo[-1])


if __name__ == '__main__':
    executor.start_polling(db, skip_updates=True)
